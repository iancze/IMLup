ddids = [i for i in range(0,26)]
SB_ddids = [i for i in range(0,18)]

rule all:
    input:
        "data/temp/initial/dsharp.fits", 
        "data/temp/initial/IMLup_continuum.py", 
        "data/temp/initial/reduction_utils.py", 
        "data/temp/initial/ms.ms", 
        "data/temp/initial/listobs.txt",
        "data/temp/initial/colnames.txt",
        "data/temp/initial/antenna_names.txt",
        "data/temp/initial/baselines.txt",
        "data/temp/initial/au_output.txt",
        expand("data/temp/initial/baseline_plots/{ddid}.png", ddid=ddids),
        "data/temp/initial/apparentsens.txt",
        "data/temp/initial/dirty/dirty.image",
        "data/temp/initial/robust_0.5/clean.image", 
        "data/temp/initial/robust_0.5/clean.psf", 
        "data/temp/initial/robust_0.5/clean.fits",
        expand("data/temp/initial/robust_0.5/{scaled_type}/{ddid:02d}.png", scaled_type=["raw", "raw-resid", "rescale"], ddid=ddids),
        "data/temp/SB/ms.ms",
        "data/temp/SB/dirty/dirty.image",
        "data/temp/SB/robust_0.5/clean.image",
        expand("data/temp/SB/robust_0.5/{scaled_type}/{ddid:02d}.png", scaled_type=["raw", "raw-resid", "rescale"], ddid=SB_ddids)

############################
# Download DSHARP products #
############################
rule download_script:
    output: "data/temp/initial/IMLup_continuum.py"
    shell: "wget https://almascience.eso.org/almadata/lp/DSHARP/scripts/IMLup_continuum.py --directory-prefix=data/temp/initial/"

rule download_common_script:
    output: "data/temp/initial/reduction_utils.py"
    shell: "wget https://almascience.eso.org/almadata/lp/DSHARP/scripts/reduction_utils.py --directory-prefix=data/temp/initial/"

rule download_fits:
    output: "data/temp/initial/dsharp.fits"
    shell: 
        "wget https://almascience.eso.org/almadata/lp/DSHARP/images/IMLup_continuum.fits --directory-prefix=data/temp/initial/ && "
        "mv data/temp/initial/IMLup_continuum.fits data/temp/initial/dsharp.fits"

rule download_ms:
    output: temp("data/temp/initial/IMLup_continuum.ms.tgz")
    shell: "wget https://almascience.eso.org/almadata/lp/DSHARP/MSfiles/IMLup_continuum.ms.tgz --directory-prefix=data/temp/initial/"

rule untar_and_rename:
    input: "data/temp/initial/IMLup_continuum.ms.tgz"
    output: directory("data/temp/initial/ms.ms")
    shell: 
        "tar -xf {input} -C data/temp/initial/ --no-same-owner && "
        "mv data/temp/initial/IMLup_continuum.ms {output}"

##############################################
# Basic statistics and information gathering #
##############################################
rule listobs:
    input: "{dir}/ms.ms"
    output: "{dir}/listobs.txt"
    shell: "python src/listobs.py {input} {output}"

rule colnames:
    input: "{dir}/ms.ms"
    output: "{dir}/colnames.txt"
    shell: "python src/get_colnames.py {input} {output}"

# There are 7 distinct observations: ObsID 0 through 6. 
# Each observation appears to have anywhere between 4 and 40 scans inside of it
# Each observation has anywhere from 2 to 6 spectral windows (prob from astrochem proposals)
# There are 26 unique spectral windows (datadescids or ddids), 0 through 25.
# The DSHARP analysis file lists the program ids as 
# SB1: 2013.1.00226.S
#      Observed 06 July 2014 (1 execution block)
# SB2: 2013.1.00226.S
#      Observed 17 July 2014 (1 execution block)
#      (see Huang et al. 2017 for additional reduction comments)
# SB3: 2013.1.00694.S
#      Observed 29 January 2015 (1 execution block)
# SB4: 2013.1.00694.S
#      Observed 13 May 2015 (1 execution block)
# SB5: 2013.1.00798.S
#      Observed 09 June 2015 (1 execution block)
# LB1: 2016.1.00484.L
#      Observed 25 September 2017 and 24 October 2017 (2 execution blocks)


rule antenna_names:
    input: "{dir}/ms.ms"
    output: "{dir}/antenna_names.txt"
    shell: "python src/get_antenna_names.py {input} --outfile {output}"


rule baseline_list:
    input: "{dir}/ms.ms"
    output: "{dir}/baselines.txt"
    shell: "python src/list_antenna_baselines.py {input} {output}"

rule au_stats:
    input: "{dir}/ms.ms"
    output: "{dir}/au_output.txt"
    shell: "python src/get_analysis_stats.py {input} {output}"

rule baselines:
    input: "{dir}/ms.ms"
    output: 
        files=expand("{{dir}}/baseline_plots/{ddid}.png", ddid=ddids),
        outdir=directory("{dir}/baseline_plots/")
    shell: "python src/baselines.py {input} {output.outdir}"
# Many datadescid's have individual channels flagged. Need to be careful about how we might combine these, later.

# tclean_wrapper(vis=combined_cont_ap+'.ms', imagename=prefix+'_continuum',
#                mask=common_mask, scales=scales, threshold='0.05mJy', 
#                robust=0.5, gain=0.1, imsize=4000, 
#                uvtaper=['0.033arcsec', '0.026arcsec', '137.53deg'])
# '.003arcsec'

# copying fiducial imaging reference pars, sort of 
# DSHARP also used a uvtaper
# DSHARP said:
#IMLup_combined_contap.image
#Beam 0.033 arcsec x 0.027 arcsec (44.96 deg)
#Flux inside disk mask: 252.25 mJy
#Peak intensity of source: 4.28 mJy/beam
#rms: 1.31e-02 mJy/beam
#Peak SNR: 326.78

rule apparentsens:
    input: "data/temp/initial/ms.ms"
    output: "data/temp/initial/apparentsens.txt"
    shell: "python src/calc_apparentsens.py {input} --robust=0.5 --cell 0.003 --imsize 4000 --outfile {output}"
# delivered RMS Point source sensitivity : 0.0068 mJy
# DSHARP measured 0.0131 mJy, about twice the theoretical, so this seems like this could be solved by a typical weight scatter issue.
# On further inspection, this could also be to the calibration errors in the dataset. Dunno if a type of self-cal would fix this.

# Make a rough plot (dirty image) of the continuum emission, so that we can understand where to start
rule dirty_image:
    input: "data/temp/initial/ms.ms"
    output: directory("data/temp/initial/dirty/dirty.image")
    shell: "python src/imaging_dirty.py {input} data/temp/initial/dirty/dirty --imsize 4000 --cell 0.003 --robust=0.5"

rule elliptical_mask:
    input: "src/masks/ellipsemask"
    output: "data/{dir}/ellipsemask"
    shell: "cp {input} {output}"


# Use the mask to produce a CLEAN image. 
# We will try a few different robust and taper values.

# DSHARP used 
# scales = [0, 10, 50, 150, 300, 450]
# tclean_wrapper(vis=combined_cont_ap+'.ms', imagename=prefix+'_continuum',
#                mask=common_mask, scales=scales, threshold='0.05mJy', 
#                robust=0.5, gain=0.1, imsize=4000, 
#                uvtaper=['0.033arcsec', '0.026arcsec', '137.53deg'])

rule clean:
    input: ms="data/temp/initial/ms.ms", mask="data/temp/initial/ellipsemask"
    output: directory("data/temp/initial/robust_0.5/clean.image"), directory("data/temp/initial/robust_0.5/clean.psf"), "data/temp/initial/robust_0.5/clean.fits"
    shell: "python src/imaging_clean.py {input.ms} data/temp/initial/robust_0.5/clean --imsize 4000 --cell 0.003 --robust=0.5 --mask={input.mask} --threshold=0.05 --scales 0 10 50 150 300 450 --uvtaper '0.033arcsec' '0.026arcsec' '137.53deg'"


# make a CLEAN cont modelcolumn and inspect weight scatter
# there are 26 ddids, so the images will be 00.png, 01.png, ..
rule weight_plot:
    input: ms="data/temp/initial/ms.ms", image="data/temp/initial/robust_0.5/clean.image"
    output: expand("data/temp/initial/robust_0.5/{{scaled_type}}/{ddid:02d}.png", ddid=ddids)
    shell: "python src/weight_scatter.py {input.ms} data/temp/initial/robust_0.5/{wildcards.scaled_type}/ {wildcards.scaled_type}"

rule weight_scatters:
    input: expand("data/temp/initial/robust_0.5/{scaled_type}/{ddid:02d}.png", scaled_type=["raw", "raw-resid", "rescale"], ddid=ddids)


# OK, we're really confused about the non-zero (positive) mean in the real residuals, seen in DDIDs 0 - 17, or the 2013.X programs
# So we'll split out just these values and then repeat the dirty / clean / scatter process to see if we can learn anything more
# All of these programs are short-baseline (max BL like 700 m, or ~0.4" features), so my guess is that the bright "core" could
# show up as a point source and thus contribute to the positive mean, but I thought I was subtracting it, so I don't know!
rule split_SB:
    input: "data/temp/initial/ms.ms"
    output: directory("data/temp/SB/ms.ms")
    shell: "python src/split_SB.py {input} {output}"

# Make a rough plot (dirty image) of the continuum emission, so that we can understand where to start
rule dirty_image_SB:
    input: "data/temp/SB/ms.ms"
    output: directory("data/temp/SB/dirty/dirty.image")
    shell: "python src/imaging_dirty.py {input} data/temp/SB/dirty/dirty --imsize 1000 --cell 0.05 --robust=0.5"

rule clean_SB:
    input: ms="data/temp/SB/ms.ms", mask="data/temp/SB/ellipsemask"
    output: directory("data/temp/SB/robust_0.5/clean.image"), directory("data/temp/SB/robust_0.5/clean.psf"), "data/temp/SB/robust_0.5/clean.fits"
    shell: "python src/imaging_clean.py {input.ms} data/temp/SB/robust_0.5/clean --imsize 1000 --cell 0.05 --robust=0.5 --mask={input.mask} --threshold=0.05 --scales 0 10 30"


rule weight_plot_SB:
    input: ms="data/temp/SB/ms.ms", image="data/temp/SB/robust_0.5/clean.image"
    output: expand("data/temp/SB/robust_0.5/{{scaled_type}}/{ddid:02d}.png", ddid=SB_ddids)
    shell: "python src/weight_scatter.py {input.ms} data/temp/SB/robust_0.5/{wildcards.scaled_type}/ {wildcards.scaled_type} --datacolumn data"

rule weight_scatters_SB:
    input: expand("data/temp/SB/robust_0.5/{scaled_type}/{ddid:02d}.png", scaled_type=["raw", "raw-resid", "rescale"], ddid=SB_ddids)


rule export_asdf:
    input: "data/temp/initial/ms.ms"
    output: "data/export/imlup.asdf"
    shell: "python src/export_asdf.py {input} {output}"

# inspect it went correctly
# python src/inspect_asdf.py data/export/imlup.asdf